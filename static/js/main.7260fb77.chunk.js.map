{"version":3,"sources":["components/ScannerJs/ScannerJs.js","components/Scanner/services/services.js","components/Scanner/components/Overlay/Overlay.js","components/Scanner/components/ScanningArea/ScanningArea.js","components/Scanner/Scanner.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["fpsCounter","redirectToTokopediaPage","url","console","log","test","window","open","alert","Overlay","props","react_default","a","createElement","className","message","ScanningArea","Scanner","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","container","React","createRef","_this2","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","PerceptionToolkit","config","debugLevel","callback","current","StreamCapture","layoutRefs","stop","apply","arguments","configPerceptionToolkit","then","_ref2","_callee2","_context2","__webpack_require__","e","bind","module","BarcodeDetector","BarcodeDetectorPolyfill","Functions","initializeExperience","importPerceptionToolkit","closeExperience","id","components_Overlay_Overlay","ref","components_ScanningArea_ScanningArea","Component","times","refreshLoop","requestAnimationFrame","now","performance","length","shift","push","ScannerJs","state","fps","updateFps","setState","handleScan","data","handleError","err","error","setInterval","style","height","width","position","top","left","background","zIndex","lib_default","delay","onError","onScan","margin","MsTransform","transform","reticle","viewBox","xmlns","x","y","fill","rx","ry","mask","Home","App","react_router_dom","to","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7260fb77.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport QrReader from 'react-qr-reader'\nimport Overlay from \"../Scanner/components/Overlay/Overlay\";\nimport \"./ScannerJs.css\"\nimport {redirectToTokopediaPage} from \"../Scanner/services/services\";\n\nconst times = [];\nlet fpsCounter;\n\nconst refreshLoop = () => {\n    window.requestAnimationFrame(() => {\n        const now = performance.now();\n        while (times.length > 0 && times[0] <= now - 1000) {\n            times.shift();\n        }\n        times.push(now);\n        fpsCounter = times.length;\n        refreshLoop();\n    });\n};\n\nrefreshLoop();\n\nclass ScannerJs extends Component {\n    state = {\n        fps: 0\n    };\n\n    updateFps= () => {\n        this.setState({\n            fps: fpsCounter\n        })\n    };\n\n    componentDidMount() {\n        setInterval(this.updateFps, 1000);\n    }\n\n    handleScan = data => {\n        if (data) {\n            alert(\"JS SCANNER\");\n            redirectToTokopediaPage(data);\n        }\n    };\n    handleError = err => {\n        console.error(err)\n    }\n    render() {\n        return (\n            <div style={{\n                \"height\": \"100%\",\n                \"width\": \"100%\",\n                \"position\": \"fixed\",\n                \"top\": \"0\",\n                \"left\": \"0\",\n                \"background\": \"#333\",\n                \"zIndex\": \"1\"\n            }}>\n                <Overlay message={\"fps: \" + this.state.fps}/>\n                <QrReader\n                    delay={300}\n                    onError={this.handleError}\n                    onScan={this.handleScan}\n                    style={{\n                        \"width\": \"100%\",\n                        \"margin\": \"0\",\n                        \"position\": \"absolute\",\n                        \"top\": \"50%\",\n                        \"MsTransform\": \"translateY(-50%)\",\n                        \"transform\": \"translateY(-50%)\"\n                    }}\n                />\n                <svg ref={this.reticle} id=\"reticle\" viewBox=\"0 0 600 600\"\n                     xmlns=\"http://www.w3.org/2000/svg\">\n                    <svg viewBox=\"0 0 600 600\">\n                        <mask id=\"reticle-cut-out\">\n                            <rect id=\"reticle-cut-out-outer\" width=\"600\" height=\"600\" x=\"0\" y=\"0\"\n                                  fill=\"#FFF\"/>\n                            <rect id=\"reticle-cut-out-inner\" x=\"10%\" y=\"10%\" width=\"500\" height=\"500\" rx=\"2\"\n                                  ry=\"2\" fill=\"#000\"/>\n                        </mask>\n                        <rect id=\"reticle-box\" width=\"600\" height=\"600\" x=\"0\" y=\"0\"\n                              fill=\"rgba(0,0,0,0.4)\" mask=\"url(#reticle-cut-out)\"/>\n                    </svg>\n                </svg>\n            </div>\n        )\n    }\n}\n\nexport default ScannerJs;\n","export const redirectToTokopediaPage = url => {\n    console.log('redirectToTokopediaPage');\n\n    let anyTokopediaLinkRegex = /(?:https:\\/\\/)?m\\.?tokopedia\\.?com(?:(?:[^' '\\n\\r]+v=)|(?:[^' '\\n\\r&#]*\\/))([^' '\\n\\r&#]+)(?:&[^' '\\n\\r]+)?|(?:https:\\/\\/)?w{0,3}\\.?tokopedia\\.?com(?:(?:[^' '\\n\\r]+v=)|(?:[^' '\\n\\r&#]*\\/))([^' '\\n\\r&#]+)(?:&[^' '\\n\\r]+)?|(?:http:\\/\\/)?m\\.?tokopedia\\.?com(?:(?:[^' '\\n\\r]+v=)|(?:[^' '\\n\\r&#]*\\/))([^' '\\n\\r&#]+)(?:&[^' '\\n\\r]+)?|(?:http:\\/\\/)?w{0,3}\\.?tokopedia\\.?com(?:(?:[^' '\\n\\r]+v=)|(?:[^' '\\n\\r&#]*\\/))([^' '\\n\\r&#]+)(?:&[^' '\\n\\r]+)?/;\n    if (anyTokopediaLinkRegex.test(url)) {\n        window.open(url, '_blank');\n    } else {\n        alert('Kode QR yang Anda scan invalid')\n    }\n};\n","import React from 'react';\nimport './Overlay.css'\n\nconst Overlay = (props) => (\n    <div className={'overlay'}>\n            <span>\n                {props.message}\n            </span>\n    </div>\n);\n\nexport default Overlay;\n","import React from 'react';\nimport './ScanningArea.css'\n\nconst ScanningArea = () => (\n    <div className=\"square\">\n        <div className=\"square-inner\"/>\n        <div className=\"scan\"/>\n    </div>\n);\n\nexport default ScanningArea;\n","import React, {Component} from 'react';\nimport {redirectToTokopediaPage} from \"./services/services\";\nimport './Scanner.css'\nimport Overlay from \"./components/Overlay/Overlay\";\nimport ScanningArea from \"./components/ScanningArea/ScanningArea\";\n\nclass Scanner extends Component {\n    constructor(props) {\n        super(props);\n\n        this.container = React.createRef();\n    };\n\n    componentDidMount() {\n        console.log('didMount', this);\n\n        const configPerceptionToolkit = async () => {\n            window.PerceptionToolkit = window.PerceptionToolkit || {};\n            window.PerceptionToolkit.config = {\n                debugLevel: 'verbose',\n                callback: redirectToTokopediaPage,\n                container: this.container.current\n            };\n\n            window.PerceptionToolkit.StreamCapture = {\n                layoutRefs: {\n                    container: this.container.current\n                }\n            };\n        };\n\n        configPerceptionToolkit().then(console.log('configPerceptionToolkit', this));\n\n        const importPerceptionToolkit = async () => {\n            await import('./perception-toolkit/lib/src/polyfill/barcode-detector')\n                .then(module => {\n                    window.BarcodeDetector = module.BarcodeDetectorPolyfill\n                });\n            await import('./perception-toolkit/lib/perception-toolkit')\n                .then(module => {\n                    console.log('perceptionToolkit installed!', {module});\n                });\n            window.PerceptionToolkit.Functions.initializeExperience();\n        };\n\n        importPerceptionToolkit();\n    }\n\n    componentWillUnmount() {\n        window.PerceptionToolkit.Functions.closeExperience();\n    }\n\n    render() {\n        return (\n            <div id={'scanner'}>\n                <Overlay message=\"Arahkan kode QR ke area yang telah ditentukan\"/>\n                <div id='stream-capture-container' ref={this.container}>\n                    <ScanningArea/>\n                    <canvas id=\"capture-canvas\"/>\n                    <video id=\"capture-video\"/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Scanner;\n","import React from 'react';\n\nfunction Home() {\n    return (\n        <div>\n            Home\n        </div>\n    );\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport {BrowserRouter, Link, Route} from 'react-router-dom';\n\nimport './App.css';\nimport Scanner from \"./components/Scanner/Scanner\";\nimport ScannerJs from \"./components/ScannerJs/ScannerJs\";\nimport Home from \"./components/Home/Home\";\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <nav>\n                        <ul>\n                            <li>\n                                <Link to=\"/\">Home</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/wasm-scanner/\">Scanner Wasm</Link>\n                            </li>\n                            <li>\n                                <Link to=\"/js-scanner/\">Scanner Js</Link>\n                            </li>\n                        </ul>\n                    </nav>\n\n                    <Route path=\"/\" exact component={Home} />\n                    <Route path=\"/wasm-scanner/\" component={Scanner} />\n                    <Route path=\"/js-scanner/\" component={ScannerJs} />\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}